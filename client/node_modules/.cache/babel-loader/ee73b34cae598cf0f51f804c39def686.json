{"ast":null,"code":"import { REGISTER_SUCCESS, REGISTER_FAIL, LOAD_FAIL, LOAD_SUCCESS, LOGIN_SUCCESS, LOGIN_FAIL } from '../actions/types';\nimport axios from 'axios';\nimport { setAlert } from './alert';\nimport isAuthToken from '../utils/isAuthToken'; //Load user\n\nexport const loadUser = () => async dispatch => {\n  if (localStorage.token) {\n    isAuthToken(localStorage.token);\n  }\n\n  try {\n    const res = await axios.get('/api/auths');\n    dispatch({\n      type: LOAD_SUCCESS,\n      payload: res.data\n    });\n  } catch (err) {\n    dispatch({\n      type: LOAD_FAIL\n    });\n  }\n}; //register user\n\nexport const registerUser = ({\n  name,\n  email,\n  password\n}) => async dispatch => {\n  const config = {\n    headers: {\n      'Content-Type': 'application/json'\n    }\n  };\n  const body = JSON.stringify({\n    name,\n    email,\n    password\n  });\n\n  try {\n    const res = await axios.post('/api/users', body, config);\n    dispatch({\n      type: REGISTER_SUCCESS,\n      payload: res.data\n    });\n  } catch (err) {\n    const errors = err.response.data.errors;\n\n    if (errors) {\n      errors.forEach(error => {\n        dispatch(setAlert(error.msg, 'danger'));\n      });\n    }\n\n    dispatch({\n      type: REGISTER_FAIL\n    });\n  }\n}; //LogIn\n\nexport const Login = (email, password) => async dispatch => {\n  const config = {\n    headers: {\n      'Content-Type': 'application/json'\n    }\n  };\n  const body = JSON.stringify({\n    email,\n    password\n  });\n\n  try {\n    const res = await axios.post('/api/auths', body, config);\n    dispatch({\n      type: LOAD_SUCCESS,\n      payload: res.data\n    });\n    dispatch(loadUser());\n  } catch (err) {}\n};","map":{"version":3,"sources":["C:\\Users\\LENOVO\\Desktop\\social\\socialapp\\client\\src\\actions\\auth.js"],"names":["REGISTER_SUCCESS","REGISTER_FAIL","LOAD_FAIL","LOAD_SUCCESS","LOGIN_SUCCESS","LOGIN_FAIL","axios","setAlert","isAuthToken","loadUser","dispatch","localStorage","token","res","get","type","payload","data","err","registerUser","name","email","password","config","headers","body","JSON","stringify","post","errors","response","forEach","error","msg","Login"],"mappings":"AAAA,SACEA,gBADF,EAEEC,aAFF,EAGEC,SAHF,EAIEC,YAJF,EAKEC,aALF,EAMEC,UANF,QAOO,kBAPP;AAQA,OAAOC,KAAP,MAAkB,OAAlB;AACA,SAASC,QAAT,QAAyB,SAAzB;AACA,OAAOC,WAAP,MAAwB,sBAAxB,C,CAEA;;AACA,OAAO,MAAMC,QAAQ,GAAG,MAAM,MAAMC,QAAN,IAAkB;AAC9C,MAAIC,YAAY,CAACC,KAAjB,EAAwB;AACtBJ,IAAAA,WAAW,CAACG,YAAY,CAACC,KAAd,CAAX;AACD;;AACD,MAAI;AACF,UAAMC,GAAG,GAAG,MAAMP,KAAK,CAACQ,GAAN,CAAU,YAAV,CAAlB;AACAJ,IAAAA,QAAQ,CAAC;AAAEK,MAAAA,IAAI,EAAEZ,YAAR;AAAsBa,MAAAA,OAAO,EAAEH,GAAG,CAACI;AAAnC,KAAD,CAAR;AACD,GAHD,CAGE,OAAOC,GAAP,EAAY;AACZR,IAAAA,QAAQ,CAAC;AAAEK,MAAAA,IAAI,EAAEb;AAAR,KAAD,CAAR;AACD;AACF,CAVM,C,CAYP;;AACA,OAAO,MAAMiB,YAAY,GAAG,CAAC;AAAEC,EAAAA,IAAF;AAAQC,EAAAA,KAAR;AAAeC,EAAAA;AAAf,CAAD,KAA+B,MAAMZ,QAAN,IAAkB;AAC3E,QAAMa,MAAM,GAAG;AACbC,IAAAA,OAAO,EAAE;AACP,sBAAgB;AADT;AADI,GAAf;AAKA,QAAMC,IAAI,GAAGC,IAAI,CAACC,SAAL,CAAe;AAAEP,IAAAA,IAAF;AAAQC,IAAAA,KAAR;AAAeC,IAAAA;AAAf,GAAf,CAAb;;AAEA,MAAI;AACF,UAAMT,GAAG,GAAG,MAAMP,KAAK,CAACsB,IAAN,CAAW,YAAX,EAAyBH,IAAzB,EAA+BF,MAA/B,CAAlB;AACAb,IAAAA,QAAQ,CAAC;AACPK,MAAAA,IAAI,EAAEf,gBADC;AAEPgB,MAAAA,OAAO,EAAEH,GAAG,CAACI;AAFN,KAAD,CAAR;AAID,GAND,CAME,OAAOC,GAAP,EAAY;AACZ,UAAMW,MAAM,GAAGX,GAAG,CAACY,QAAJ,CAAab,IAAb,CAAkBY,MAAjC;;AACA,QAAIA,MAAJ,EAAY;AACVA,MAAAA,MAAM,CAACE,OAAP,CAAeC,KAAK,IAAI;AACtBtB,QAAAA,QAAQ,CAACH,QAAQ,CAACyB,KAAK,CAACC,GAAP,EAAY,QAAZ,CAAT,CAAR;AACD,OAFD;AAGD;;AACDvB,IAAAA,QAAQ,CAAC;AAAEK,MAAAA,IAAI,EAAEd;AAAR,KAAD,CAAR;AACD;AACF,CAvBM,C,CAyBP;;AAEA,OAAO,MAAMiC,KAAK,GAAG,CAACb,KAAD,EAAQC,QAAR,KAAqB,MAAMZ,QAAN,IAAkB;AAC1D,QAAMa,MAAM,GAAG;AACbC,IAAAA,OAAO,EAAE;AACP,sBAAgB;AADT;AADI,GAAf;AAKA,QAAMC,IAAI,GAAGC,IAAI,CAACC,SAAL,CAAe;AAAEN,IAAAA,KAAF;AAASC,IAAAA;AAAT,GAAf,CAAb;;AACA,MAAI;AACF,UAAMT,GAAG,GAAG,MAAMP,KAAK,CAACsB,IAAN,CAAW,YAAX,EAAyBH,IAAzB,EAA+BF,MAA/B,CAAlB;AACAb,IAAAA,QAAQ,CAAC;AAAEK,MAAAA,IAAI,EAAEZ,YAAR;AAAsBa,MAAAA,OAAO,EAAEH,GAAG,CAACI;AAAnC,KAAD,CAAR;AACAP,IAAAA,QAAQ,CAACD,QAAQ,EAAT,CAAR;AACD,GAJD,CAIE,OAAOS,GAAP,EAAY,CAAE;AACjB,CAZM","sourcesContent":["import {\r\n  REGISTER_SUCCESS,\r\n  REGISTER_FAIL,\r\n  LOAD_FAIL,\r\n  LOAD_SUCCESS,\r\n  LOGIN_SUCCESS,\r\n  LOGIN_FAIL\r\n} from '../actions/types';\r\nimport axios from 'axios';\r\nimport { setAlert } from './alert';\r\nimport isAuthToken from '../utils/isAuthToken';\r\n\r\n//Load user\r\nexport const loadUser = () => async dispatch => {\r\n  if (localStorage.token) {\r\n    isAuthToken(localStorage.token);\r\n  }\r\n  try {\r\n    const res = await axios.get('/api/auths');\r\n    dispatch({ type: LOAD_SUCCESS, payload: res.data });\r\n  } catch (err) {\r\n    dispatch({ type: LOAD_FAIL });\r\n  }\r\n};\r\n\r\n//register user\r\nexport const registerUser = ({ name, email, password }) => async dispatch => {\r\n  const config = {\r\n    headers: {\r\n      'Content-Type': 'application/json'\r\n    }\r\n  };\r\n  const body = JSON.stringify({ name, email, password });\r\n\r\n  try {\r\n    const res = await axios.post('/api/users', body, config);\r\n    dispatch({\r\n      type: REGISTER_SUCCESS,\r\n      payload: res.data\r\n    });\r\n  } catch (err) {\r\n    const errors = err.response.data.errors;\r\n    if (errors) {\r\n      errors.forEach(error => {\r\n        dispatch(setAlert(error.msg, 'danger'));\r\n      });\r\n    }\r\n    dispatch({ type: REGISTER_FAIL });\r\n  }\r\n};\r\n\r\n//LogIn\r\n\r\nexport const Login = (email, password) => async dispatch => {\r\n  const config = {\r\n    headers: {\r\n      'Content-Type': 'application/json'\r\n    }\r\n  };\r\n  const body = JSON.stringify({ email, password });\r\n  try {\r\n    const res = await axios.post('/api/auths', body, config);\r\n    dispatch({ type: LOAD_SUCCESS, payload: res.data });\r\n    dispatch(loadUser());\r\n  } catch (err) {}\r\n};\r\n"]},"metadata":{},"sourceType":"module"}