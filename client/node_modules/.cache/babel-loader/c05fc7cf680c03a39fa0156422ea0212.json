{"ast":null,"code":"import { REGISTER_SUCCESS, REGISTER_FAIL } from '../actions/types';\nimport axios from 'axios';\nimport { setAlert } from './alert'; //Load user\n\nexport const loadUser = () => async dispatch => {\n  if (localStorage.token) {\n    isAuthToken(localStorage.token);\n  }\n\n  try {\n    const res = await axios.get('/api/auths');\n    dispatch({\n      type: LOAD_SUCCESS,\n      payload: res.data\n    });\n  } catch (err) {\n    dispatch({\n      type: LOAD_FAIL\n    });\n  }\n}; //register user\n\nexport const registerUser = ({\n  name,\n  email,\n  password\n}) => async dispatch => {\n  const config = {\n    headers: {\n      'Content-Type': 'application/json'\n    }\n  };\n  const body = JSON.stringify({\n    name,\n    email,\n    password\n  });\n\n  try {\n    const res = await axios.post('/api/users', body, config);\n    dispatch({\n      type: REGISTER_SUCCESS,\n      payload: res.data\n    });\n  } catch (err) {\n    const errors = err.response.data.errors;\n\n    if (errors) {\n      errors.forEach(error => {\n        dispatch(setAlert(error.msg, 'danger'));\n      });\n    }\n\n    dispatch({\n      type: REGISTER_FAIL\n    });\n  }\n};","map":{"version":3,"sources":["C:\\Users\\LENOVO\\Desktop\\social\\socialapp\\client\\src\\actions\\auth.js"],"names":["REGISTER_SUCCESS","REGISTER_FAIL","axios","setAlert","loadUser","dispatch","localStorage","token","isAuthToken","res","get","type","LOAD_SUCCESS","payload","data","err","LOAD_FAIL","registerUser","name","email","password","config","headers","body","JSON","stringify","post","errors","response","forEach","error","msg"],"mappings":"AAAA,SAASA,gBAAT,EAA2BC,aAA3B,QAAgD,kBAAhD;AACA,OAAOC,KAAP,MAAkB,OAAlB;AACA,SAASC,QAAT,QAAyB,SAAzB,C,CAEA;;AACA,OAAO,MAAMC,QAAQ,GAAG,MAAM,MAAMC,QAAN,IAAkB;AAC9C,MAAIC,YAAY,CAACC,KAAjB,EAAwB;AACtBC,IAAAA,WAAW,CAACF,YAAY,CAACC,KAAd,CAAX;AACD;;AACD,MAAI;AACF,UAAME,GAAG,GAAG,MAAMP,KAAK,CAACQ,GAAN,CAAU,YAAV,CAAlB;AACAL,IAAAA,QAAQ,CAAC;AAAEM,MAAAA,IAAI,EAAEC,YAAR;AAAsBC,MAAAA,OAAO,EAAEJ,GAAG,CAACK;AAAnC,KAAD,CAAR;AACD,GAHD,CAGE,OAAOC,GAAP,EAAY;AACZV,IAAAA,QAAQ,CAAC;AAAEM,MAAAA,IAAI,EAAEK;AAAR,KAAD,CAAR;AACD;AACF,CAVM,C,CAYP;;AACA,OAAO,MAAMC,YAAY,GAAG,CAAC;AAAEC,EAAAA,IAAF;AAAQC,EAAAA,KAAR;AAAeC,EAAAA;AAAf,CAAD,KAA+B,MAAMf,QAAN,IAAkB;AAC3E,QAAMgB,MAAM,GAAG;AACbC,IAAAA,OAAO,EAAE;AACP,sBAAgB;AADT;AADI,GAAf;AAKA,QAAMC,IAAI,GAAGC,IAAI,CAACC,SAAL,CAAe;AAAEP,IAAAA,IAAF;AAAQC,IAAAA,KAAR;AAAeC,IAAAA;AAAf,GAAf,CAAb;;AAEA,MAAI;AACF,UAAMX,GAAG,GAAG,MAAMP,KAAK,CAACwB,IAAN,CAAW,YAAX,EAAyBH,IAAzB,EAA+BF,MAA/B,CAAlB;AACAhB,IAAAA,QAAQ,CAAC;AACPM,MAAAA,IAAI,EAAEX,gBADC;AAEPa,MAAAA,OAAO,EAAEJ,GAAG,CAACK;AAFN,KAAD,CAAR;AAID,GAND,CAME,OAAOC,GAAP,EAAY;AACZ,UAAMY,MAAM,GAAGZ,GAAG,CAACa,QAAJ,CAAad,IAAb,CAAkBa,MAAjC;;AACA,QAAIA,MAAJ,EAAY;AACVA,MAAAA,MAAM,CAACE,OAAP,CAAeC,KAAK,IAAI;AACtBzB,QAAAA,QAAQ,CAACF,QAAQ,CAAC2B,KAAK,CAACC,GAAP,EAAY,QAAZ,CAAT,CAAR;AACD,OAFD;AAGD;;AACD1B,IAAAA,QAAQ,CAAC;AAAEM,MAAAA,IAAI,EAAEV;AAAR,KAAD,CAAR;AACD;AACF,CAvBM","sourcesContent":["import { REGISTER_SUCCESS, REGISTER_FAIL } from '../actions/types';\r\nimport axios from 'axios';\r\nimport { setAlert } from './alert';\r\n\r\n//Load user\r\nexport const loadUser = () => async dispatch => {\r\n  if (localStorage.token) {\r\n    isAuthToken(localStorage.token);\r\n  }\r\n  try {\r\n    const res = await axios.get('/api/auths');\r\n    dispatch({ type: LOAD_SUCCESS, payload: res.data });\r\n  } catch (err) {\r\n    dispatch({ type: LOAD_FAIL });\r\n  }\r\n};\r\n\r\n//register user\r\nexport const registerUser = ({ name, email, password }) => async dispatch => {\r\n  const config = {\r\n    headers: {\r\n      'Content-Type': 'application/json'\r\n    }\r\n  };\r\n  const body = JSON.stringify({ name, email, password });\r\n\r\n  try {\r\n    const res = await axios.post('/api/users', body, config);\r\n    dispatch({\r\n      type: REGISTER_SUCCESS,\r\n      payload: res.data\r\n    });\r\n  } catch (err) {\r\n    const errors = err.response.data.errors;\r\n    if (errors) {\r\n      errors.forEach(error => {\r\n        dispatch(setAlert(error.msg, 'danger'));\r\n      });\r\n    }\r\n    dispatch({ type: REGISTER_FAIL });\r\n  }\r\n};\r\n"]},"metadata":{},"sourceType":"module"}